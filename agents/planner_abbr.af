{
  "agents": [
    {
      "name": "planner",
      "tool_ids": [
        "tool-0",
        "tool-1",
        "tool-6",
        "tool-7",
        "tool-8",
        "tool-9",
        "tool-10",
        "tool-11",
        "tool-12",
        "tool-13",
        "tool-14",
        "tool-15",
        "tool-16"
      ],
      "block_ids": [
        "block-0",
        "block-1"
      ],
      "tool_rules": [
        {
          "tool_name": "conversation_search",
          "type": "continue_loop"
        },
        {
          "tool_name": "send_message",
          "type": "exit_loop"
        }
      ],
      "system": "<base_instructions>... ...</base_instructions>",
      "agent_type": "letta_v1_agent",
      "llm_config": {
        "model": "gpt-5",
        "model_endpoint_type": "openai",
        "model_endpoint": "https://api.openai.com/v1",
        "temperature": 0.2,
        "max_tokens": 16384
      },
      "embedding_config": {
        "embedding_endpoint_type": "openai",
        "embedding_endpoint": "https://embeddings.letta.com/",
        "embedding_model": "letta-free",
        "embedding_dim": 1536
      },
      "description": "DCF Planner Agent with a sleep-time companion.",
      "id": "agent-0",
      "group_ids": [
        "group-0"
      ]
    },
    {
      "name": "planner-sleeptime",
      "tool_ids": [
        "tool-2",
        "tool-3",
        "tool-4",
        "tool-5"
      ],
      "block_ids": [
        "block-0",
        "block-1",
        "block-2"
      ],
      "tool_rules": [
        {
          "tool_name": "memory_finish_edits",
          "type": "exit_loop"
        },
        {
          "tool_name": "memory_insert",
          "type": "continue_loop"
        },
        {
          "tool_name": "memory_rethink",
          "type": "continue_loop"
        },
        {
          "tool_name": "memory_replace",
          "type": "continue_loop"
        }
      ],
      "system": "<base_instructions>... ...</base_instructions>",
      "agent_type": "sleeptime_agent",
      "llm_config": {
        "model": "letta-free",
        "model_endpoint_type": "openai",
        "model_endpoint": "https://inference.letta.com/v1/",
        "temperature": 0.7
      },
      "embedding_config": {
        "embedding_endpoint_type": "openai",
        "embedding_endpoint": "https://embeddings.letta.com/",
        "embedding_model": "letta-free",
        "embedding_dim": 1536
      },
      "timezone": "UTC",
      "max_files_open": 5,
      "per_file_view_window_char_limit": 15000,
      "id": "agent-1"
    }
  ],
  "groups": [
    {
      "agent_ids": [
        "agent-1"
      ],
      "manager_config": {
        "manager_type": "sleeptime",
        "manager_agent_id": "agent-0",
        "sleeptime_agent_frequency": 5
      },
      "id": "group-0"
    }
  ],
  "blocks": [
    {
      "value": "The following is my persona:..."",
      "limit": 20000,
      "label": "persona",
      "description": "The persona block: Stores details about your current persona, guiding how you behave and respond. This helps you to maintain consistency and personality in your interactions.",
      "id": "block-0"
    },
    {
      "value": "This is my section of core memory devoted to information about the human...",
      "limit": 20000,
      "label": "human",
      "description": "The human block: Stores key details about the person you are conversing with, allowing for more personalized and friend-like conversation.",
      "id": "block-1"
    },
    {
      "value": "I am an expert conversation memory agent that can do the following:...",
      "limit": 20000,
      "label": "memory_persona",
      "id": "block-2"
    }
  ],
  "tools": [
    {
      "id": "tool-0",
      "tool_type": "letta_core",
      "description": "Search prior conversation history using hybrid search...",
      "source_type": "python",
      "name": "conversation_search",
      "tags": [
        "letta_core"
      ],
      "json_schema": {... ...},
      "return_char_limit": 50000
    },
    {
      "id": "tool-1",
      "tool_type": "letta_core",
      "description": "Sends a message to the human user.",
      "source_type": "python",
      "name": "send_message",
      "tags": [
        "letta_core"
      ],
      "json_schema": {... ...},
      "return_char_limit": 50000
    },
    {
      "id": "tool-2",
      "tool_type": "letta_sleeptime_core",
      "description": "This function is called when the agent is done rethinking the memory.",
      "source_type": "python",
      "name": "memory_finish_edits",
      "tags": [
        "letta_sleeptime_core"
      ],
      "json_schema": {... ...},
      "return_char_limit": 50000
    },
    {
      "id": "tool-3",
      "tool_type": "letta_sleeptime_core",
      "description": "The memory_insert command allows you to insert text at a specific location in a memory block...",
      "source_type": "python",
      "name": "memory_insert",
      "tags": [
        "letta_sleeptime_core"
      ],
      "json_schema": {... ...},
      "return_char_limit": 50000
    },
    {
      "id": "tool-4",
      "tool_type": "letta_sleeptime_core",
      "description": "The memory_replace command allows you to replace a specific string in a memory block with a new string...",
      "source_type": "python",
      "name": "memory_replace",
      "tags": [
        "letta_sleeptime_core"
      ],
      "json_schema": {... ...},
      "return_char_limit": 50000
    },
    {
      "id": "tool-5",
      "tool_type": "letta_sleeptime_core",
      "description": "The memory_rethink command allows you to completely rewrite the contents of a memory block...",
      "source_type": "python",
      "name": "memory_rethink",
      "tags": [
        "letta_sleeptime_core"
      ],
      "json_schema": {... ...},
      "return_char_limit": 50000
    },
    {
      "id": "tool-6",
      "tool_type": "dcf",
      "description": "Discover Skill Manifests from a directory and summarize their metadata.",
      "source_type": "python",
      "name": "get_skillset",
      "tags": [
        "dcf"
      ],
      "json_schema": {... ...},
      "return_char_limit": 50000
    },
    {
      "id": "tool-7",
      "tool_type": "dcf",
      "description": "Validate a Skill Manifest (v2.0.0) and run static sanity checks.",
      "source_type": "python",
      "name": "validate_skill_manifest",
      "tags": [
        "dcf"
      ],
      "json_schema": {... ...},
      "return_char_limit": 50000
    },
    {
      "id": "tool-8",
      "tool_type": "dcf",
      "description": "Validate a Lettaâ€“ASL workflow (v2.2.0) and resolve .af and skill references.",
      "source_type": "python",
      "name": "validate_workflow",
      "tags": [
        "dcf"
      ],
      "json_schema": {... ...},
      "return_char_limit": 50000
    },
    {
      "id": "tool-9",
      "tool_type": "dcf",
      "description": "Create (idempotently) the RedisJSON control-plane for a workflow (choreography style).",
      "source_type": "python",
      "name": "create_workflow_control_plane",
      "tags": [
        "dcf"
      ],
      "json_schema": {... ...},
      "return_char_limit": 50000
    },
    {
      "id": "tool-10",
      "tool_type": "dcf",
      "description": "Create one worker agent per ASL Task state using Letta .af v2 templates.",
      "source_type": "python",
      "name": "create_worker_agents",
      "tags": [
        "dcf"
      ],
      "json_schema": {... ...},
      "return_char_limit": 50000
    },
    {
      "id": "tool-11",
      "tool_type": "dcf",
      "description": "Read workflow control-plane documents from RedisJSON and optionally compute readiness.",
      "source_type": "python",
      "name": "read_workflow_control_plane",
      "tags": [
        "dcf"
      ],
      "json_schema": {... ...},
      "return_char_limit": 50000
    },
    {
      "id": "tool-12",
      "tool_type": "dcf",
      "description": "Notify downstream (or initial) worker agent(s) for a workflow state machine.",
      "source_type": "python",
      "name": "notify_next_worker_agent",
      "tags": [
        "dcf"
      ],
      "json_schema": {... ...},
      "return_char_limit": 50000
    },
    {
      "id": "tool-13",
      "tool_type": "dcf",
      "description": "Notify a single target state's worker agent IFF the state is ready (or unconditionally if require_ready=False).",
      "source_type": "python",
      "name": "notify_if_ready",
      "tags": [
        "dcf"
      ],
      "json_schema": {... ...},
      "return_char_limit": 50000
    },
    {
      "id": "tool-14",
      "tool_type": "dcf",
      "description": "Finalize a workflow execution: optionally delete worker agents, close open states, and write final audit/summary metadata.",
      "source_type": "python",
      "name": "finalize_workflow",
      "tags": [
        "dcf"
      ],
      "json_schema": {... ...},
      "return_char_limit": 50000
    },
    {
      "id": "tool-15",
      "tool_type": "dcf",
      "description": "Store workflow insights into long-term memory for downstream agents.",
      "source_type": "python",
      "name": "store_memory",
      "tags": [
        "dcf"
      ],
      "json_schema": {... ...},
      "return_char_limit": 50000
    },
    {
      "id": "tool-16",
      "tool_type": "dcf",
      "description": "Append a workflow execution episode to the shared knowledge graph timeline.",
      "source_type": "python",
      "name": "append_graph_episode",
      "tags": [
        "dcf"
      ],
      "json_schema": {... ...},
      "return_char_limit": 50000
    }
  ],
  "metadata": {
    "revision_id": "c734cfc0d595"
  }
}
