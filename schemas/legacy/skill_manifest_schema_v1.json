{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://example.com/schemas/skill_manifest_v1.json",
  "title": "Skill Manifest v1",
  "description": "Defines a Skill Package for the Dynamic Capability Framework (DCF) v1, including directives, tools, and data sources required for an AI agent capability.",
  "type": "object",
  "properties": {
    "manifestApiVersion": {
      "description": "The version of the Skill Manifest schema itself.",
      "type": "string",
      "enum": ["v1"]
    },
    "skillPackageId": {
      "description": "A persistent unique identifier (UUID) for the conceptual Skill Package this manifest defines.",
      "type": "string",
      "format": "uuid"
    },
    "manifestId": {
      "description": "A unique identifier (UUID) for this specific version/instance of the Skill Manifest document.",
      "type": "string",
      "format": "uuid"
    },
    "skillName": {
      "description": "Human-readable name for the Skill Package.",
      "type": "string",
      "minLength": 1
    },
    "skillVersion": {
      "description": "Version string for the Skill Package (e.g., semantic versioning like '1.0.0').",
      "type": "string",
      "minLength": 1
    },
    "description": {
      "description": "A brief description of the Skill Package's purpose and capabilities, intended for LLM understanding.",
      "type": "string"
    },
    "skillDirectives": {
      "description": "Core instructions/prompts defining the skill's behavior, to be loaded into the agent's primary working memory.",
      "type": "string",
      "minLength": 1
    },
    "requiredTools": {
      "description": "An array of tools required for this skill. The Skill Loader will attempt to register tools defined via source code if they don't exist (checking by toolName), and attach all listed tools to the agent.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "toolName": {
            "description": "The functional name the agent or LLM might use to refer to or invoke the tool. Also used to check for pre-existing tools before registration if defined via source code.",
            "type": "string",
            "minLength": 1
          },
          "description": {
            "description": "The docstring/description for the tool, explaining its purpose, arguments, and return values for the LLM.",
            "type": "string",
            "minLength": 1
          },
          "definition": {
            "description": "Specifies how the tool is defined or where to find it.",
            "oneOf": [
              {
                "title": "Python Source Code Definition",
                "type": "object",
                "properties": {
                  "type": {
                    "const": "python_source"
                  },
                  "sourceCode": {
                    "description": "A string containing the complete Python source code for the tool function.",
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": ["type", "sourceCode"],
                "additionalProperties": false
              },
              {
                "title": "Reference to Pre-Registered Tool",
                "type": "object",
                "properties": {
                  "type": {
                    "const": "registered"
                  },
                  "platformToolId": {
                    "description": "The Letta platform-specific ID of the tool that is already registered on the platform. This ID is used by the Letta SDK to retrieve the tool.",
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": ["type"],
                "additionalProperties": false
              },
              {
                "title": "MCP Server Reference",
                "type": "object",
                "properties": {
                  "type": {
                    "const": "mcp_server"
                  },
                  "endpointUrl": {
                    "description": "The base URL of the MCP server. The agent will use this as the base for constructing API calls.",
                    "type": "string",
                    "format": "uri"
                  },
                  "operationId": {
                    "description": "The specific operationId from the server's OpenAPI specification that corresponds to this tool's function.",
                    "type": "string",
                    "minLength": 1
                  },
                  "openApiSpecUrl": {
                    "description": "Optional URL to the OpenAPI (v3) or Swagger (v2) JSON specification for the server. If not provided, the agent may attempt to discover it at a default location (e.g., /openapi.json).",
                    "type": "string",
                    "format": "uri"
                  }
                },
                "required": ["type", "endpointUrl", "operationId"],
                "additionalProperties": false
              }
            ]
          }
        },
        "required": ["toolName", "description", "definition"]
      },
      "minItems": 0,
      "default": []
    },
    "requiredDataSources": {
      "description": "An array of data sources providing knowledge or context for the skill, typically loaded into archival/recall memory.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "dataSourceId": {
            "description": "A manifest-defined unique identifier (UUID) for this data source entry. Used for generating unique block labels and internal tracking within the manifest.",
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "description": "Optional description of what this data represents.",
            "type": "string"
          },
          "destination": {
            "description": "Specifies the target memory type for the data.",
            "type": "string",
            "enum": ["archival_memory"] ,
            "default": "archival_memory"
          },
          "content": {
            "description": "Specifies the content or location of the data.",
            "oneOf": [
              {
                "title": "Inline Text Content",
                "type": "object",
                "properties": {
                  "type": {
                    "const": "text_content"
                  },
                  "text": {
                    "description": "The raw text data to be loaded.",
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": ["type", "text"],
                "additionalProperties": false
              }
            ]
          }
        },
        "required": ["dataSourceId", "destination", "content"]
      },
      "minItems": 0,
      "default": []
    }
  },
  "required": [
    "manifestApiVersion",
    "skillPackageId",
    "manifestId",
    "skillName",
    "skillVersion",
    "skillDirectives"
  ],
  "additionalProperties": false
}
